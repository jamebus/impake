#!/bin/sh

set -eu

me="${0##*/}"
default_expiry='1w'
storage_url='https://file.io'
expires_parameter='expires'
upload_failure_throttle='30'

usage() {
	local rc
	rc=${1:-0}
	echo "Usage: $me [options] file_or_directory ..."
	echo
	echo '       -c, --compress Compression method:'
	echo '                      single file: bzip2, gzip, xz'
	echo '                      zip:         bzip2, copy, deflate, deflate64, lzma, ppmd'
	echo '                      7z:          bzip2, copy, deflate, lzma, lzma2, ppmd'
	echo '                      tar:         bzip2, gzip, xz'
	echo '       -e, --encrypt  Enable encryption, zip and 7z only'
	echo "       -h, --help     You're looking at it :)"
	echo '       -s, --size     Create multi-volume archive of this size,'
	echo '                      zip and 7z only'
	echo '       -t, --type     Archive type:'
	echo '                      none (single file), zip, 7z, tar'
	echo '       -x, --expire   Expire the file in N[mdy]'
	echo
	echo "Sensible defaults will be chosen if an option isn't specified"
	exit $rc
}

suggest_help() {
	echo "Try '$me --help' for more information"
	exit 1
}

fail() {
	echo "ERROR: $1" 1>&2
	exit 1
}

notice() {
	echo "Notice: $1"
}

test $# -lt 1 && usage 1

while [ $# -ne 0 ]; do
	opt=''
	arg=''
	case $1 in
		--*=*)
			opt=$(echo "$1" | awk -F= '{print $1}')
			arg=$(echo "$1" | awk -F= '{print $2}')
			shift
			;;
		-*)
			opt=$1
			shift
			case ${1:-} in
				-*)
					:;;
				*)
					# -e doesn't want an argument
					if [ ! "$opt" = '-e' ]; then
						arg="${1:-}"
						test $# -gt 0 && shift
					fi
					;;
			esac
	esac

	case $opt in
		-c|--compress)
			opt_compress='1'
			opt_compress_arg="$arg"
			;;
		-e|--encrypt)
			opt_encrypt='1'
			;;
		-h|--help)
			usage
			;;
		-s|--size)
			opt_size='1'
			opt_size_arg="$arg"
			;;
		-t|--type)
			opt_type='1'
			opt_type_arg="$arg"
			;;
		-x|--expire)
			opt_expire='1'
			opt_expire_arg="$arg"
			;;
		-*|--*)
			fail "Unknown option: $opt"
			;;
		*)
			break
			;;
	esac
done

test $# -gt 1 && have_things=1
for thing in "$@"; do
	test -e "$thing" || missing="${missing:-}\"${thing}\" "
	test -z "${have_things:-}" && test -d "$thing" && have_things=1
done
if [ -n "${missing:-}" ]; then
	fail "Does not exist: ${missing% }. Aborting."
fi

if [ -n "${opt_type:-}" ]; then
	case "$opt_type_arg" in
		none|zip|7z|tar) :;;
		*)
			fail "Invalid argument to type: $opt_type_arg"
			;;
	esac
fi

if [ -n "${opt_compress:-}" ]; then
	case "$opt_compress_arg" in
		bzip2|copy|deflate|deflate64|gzip|lzma|lzma2|ppmd|xz) :;;
		*)
			fail "Invalid argument to compress: $opt_compress_arg"
			;;
esac
fi

if [ -z "${opt_type:-}" -a \
     \( -n "${opt_encrypt:-}" -o -n "${opt_size:-}" \) ]; then
	opt_type='1'
	opt_type_arg='7z'
	notice 'Using 7z(1) to build the archive'
fi

if [ -z "${opt_type:-}" -a -n "${have_things:-}" ]; then
	opt_type='1'
	opt_type_arg='tar'
	notice 'Using tar(1) to build the archive'
fi

if [ -z "${opt_type:-}" -o "${opt_type_arg:-}" = 'none' ]; then
	archive_command=''
	archive_arguments=''
	archive_filename_extension=''
	test -n "${opt_encrypt:-}" && \
	  fail "Can't encrypt archive type $opt_type_arg"
	test -n "${opt_size:-}" && \
	  fail "Can't create volumes with archive type $opt_type_arg"
	if [ -n "${opt_compress:-}" ]; then
		archive_command='7z'
		archive_basename="$@"
		case $opt_compress_arg in
			bzip2)
				archive_arguments='a -tbzip2'
				archive_filename_extension='.bzip2'
				;;
			gzip)
				archive_arguments='a -tgzip'
				archive_filename_extension='.gzip'
				;;
			xz)
				archive_arguments='a -txz'
				archive_filename_extension='.xz'
				;;
			*)
				fail "Unsupported compression method $opt_compress_arg for a single file"
		esac
	else
		upload_in_place=1
	fi
elif [ "$opt_type_arg" = '7z' ]; then
	archive_command='7z'
	archive_arguments='a'
	archive_filename_extension='.7z'
	test -n "${opt_encrypt:-}" && \
	  archive_arguments="$archive_arguments -p -mhe=on"
	test -n "${opt_size:-}" && \
	  archive_arguments="$archive_arguments -v${opt_size_arg}"
	if [ -n "${opt_compress:-}" ]; then
	  case $opt_compress_arg in
	    bzip2)
	      archive_arguments="$archive_arguments -m0=bzip2"
	      ;;
	    copy)
	      archive_arguments="$archive_arguments -m0=copy"
	      ;;
	    deflate)
	      archive_arguments="$archive_arguments -m0=deflate"
	      ;;
	    lzma)
	      archive_arguments="$archive_arguments -m0=lzma"
	      ;;
	    lzma2)
	      archive_arguments="$archive_arguments -m0=lzma2"
	      ;;
	    ppmd)
	      archive_arguments="$archive_arguments -m0=ppmd"
	      ;;
	    *)
	      fail "Unsupported compression method $opt_compress_arg for archive type $opt_type_arg"
	  esac
	fi
elif [ "$opt_type_arg" = 'zip' ]; then
	archive_command='7z'
	archive_arguments='a -tzip'
	archive_filename_extension='.zip'
	test -n "${opt_encrypt:-}" && \
	  archive_arguments="$archive_arguments -p"
	test -n "${opt_size:-}" && \
	  archive_arguments="$archive_arguments -v${$opt_size_arg}"
	if [ -n "${opt_compress:-}" ]; then
	  case $opt_compress_arg in
	    bzip2)
	      archive_arguments="$archive_arguments -m0=bzip2"
	      ;;
	    copy)
	      archive_arguments="$archive_arguments -m0=copy"
	      ;;
	    deflate)
	      archive_arguments="$archive_arguments -m0=deflate"
	      ;;
	    deflate64)
	      archive_arguments="$archive_arguments -m0=deflate64"
	      ;;
	    lzma)
	      archive_arguments="$archive_arguments -m0=lzma"
	      ;;
	    ppmd)
	      archive_arguments="$archive_arguments -m0=ppmd"
	      ;;
	    *)
	      fail "Unsupported compression method $opt_compress_arg for archive type $opt_type_arg"
	  esac
	fi
elif [ "$opt_type_arg" = 'tar' ]; then
	archive_command='tar'
	archive_arguments='cvf'
	archive_filename_extension='.tar'
	test -n "${opt_encrypt:-}" && \
	  fail "Can't encrypt archive type $opt_type_arg"
	test -n "${opt_size:-}" && \
	  fail "Can't create volumes with archive type $opt_type_arg"
	if [ -n "${opt_compress:-}" ]; then
	  case $opt_compress_arg in
	    bzip2)
	      archive_arguments="${archive_arguments}j"
	      archive_filename_extension="${archive_filename_extension}.bzip2"
	      ;;
	    gzip)
	      archive_arguments="${archive_arguments}z"
	      archive_filename_extension="${archive_filename_extension}.gz"
	      ;;
	    xz)
	      archive_arguments="${archive_arguments}J"
	      archive_filename_extension="${archive_filename_extension}.xz"
	      ;;
	    *)
	      fail "Unsupported compression method $opt_compress_arg for archive type $opt_type_arg"
	  esac
	fi
fi

# TODO validate and implement expiration
#
# The query param expires must be a positive integer which, by default,
# represents the number of days until the file will be deleted (defaults to 14
# days). If you follow it with w, it will be the number of weeks. m for months
# and y for years.
#
# d also works, and if you don't specify, it will assume days
#
if [ -z "${opt_expire:-}" ]; then
	opt_expire_arg="$default_expiry"
fi

if [ $# -eq 0 ]; then
	echo 'Cowardly refusing to send nothing'
	suggest_help
fi

for tool in 7z jq curl uuidgen realpath; do
	which "$tool" >/dev/null 2>&1 || missing="${missing:-}${tool} "
done
if [ -n "${missing:-}" ]; then
	fail "Missing: ${missing% }. Aborting."
fi

# BSD
if mktemp -d -u -t "$me" >/dev/null 2>&1; then
	tmpdir=$(mktemp -d -t "$me")
# GNU coreutils
elif mktemp -d -u -p "${TMPDIR:-/tmp}" "${me}.XXXXXXXXXX" >/dev/null 2>&1; then
	tmpdir=$(mktemp -d -p "${TMPDIR:-/tmp}" "${me}.XXXXXXXXXX")
else
	fail 'Unable to figure out how to make a temporary directory. Aborting.'
fi
trap 'rm -rf "$tmpdir"' EXIT

test -z "${archive_basename:-}" && archive_basename=$(uuidgen | tr 'A-Z' 'a-z')
test -z "${upload_in_place:-}" && \
  $archive_command $archive_arguments "${tmpdir}/$archive_basename${archive_filename_extension}" "$@"

echo

if [ -z "${upload_in_place:-}" ]; then
	if [ -f "${tmpdir}/${archive_basename}${archive_filename_extension}.001" -a \
	     ! -f "${tmpdir}/${archive_basename}${archive_filename_extension}.002" ]; then
		mv "${tmpdir}/${archive_basename}${archive_filename_extension}.001" \
		  "${tmpdir}/${archive_basename}${archive_filename_extension}"
		echo "${tmpdir}/${archive_basename}${archive_filename_extension}" > "${tmpdir}/files"
	elif [ -f "${tmpdir}/${archive_basename}${archive_filename_extension}.001" ]; then
		ls -1 "${tmpdir}/${archive_basename}${archive_filename_extension}."* > "${tmpdir}/files"
	else
		echo "${tmpdir}/${archive_basename}${archive_filename_extension}" > "${tmpdir}/files"
	fi
else
	realpath "$@" > "${tmpdir}/files"
fi

while read f; do
	for t in 1 2 3 4 5 6; do
		response=$(curl -F file=@"${f}" "${storage_url}/?${expires_parameter}=${opt_expire_arg}")
		test "$(echo "$response" | jq -r '.success'  2>/dev/null)" = 'true' && break
		if [ $t -lt 6 ]; then
			echo "Upload failed, retrying: ${t}/5" 1>&2
			sleep "$upload_failure_throttle"
		else
			fail 'Aborting after 5 attempts.'
		fi
	done
	urls="${urls:-}$(echo "$response" | jq -r '.link' 2>/dev/null) "
	expiry=$(echo "$response" | jq -r '.expiry'  2>/dev/null)
done < "${tmpdir}/files"

echo
for url in $urls; do
	echo "URL:    $url"
done
echo "Expiry: $expiry"
